
iOS 瘦包测试
	Build Settings -> Generate Debug Symbols设置为NO  就小了一半 
	Build Settings -> Strip Debug Symbols During Copy，Debug下设置为NO，Release下设置为YES
	Build Setting -> User-Defined -> EMBEDDED_CONTENT_CONTAINS_SWIFT 设置为NO  
	Bitcode No

离线推送弹框设置:预处理宏 oc使用
	Targets-->Build Settings --> Preprocessor Macros 预处理器宏 DISABLE_PUSH_NOTIFICATIONS=1

Swift 宏添加
	swift  --> active compilation conditions

取消异常问题
	Targets-->Build Settings --> Enable Objective-C Exceptions = Yes

iOS 日志调试查看
	brew update
	brew install ideviceinstaller
	brew install libimobiledevice
	https://github.com/libimobiledevice/libimobiledevice
	查看系统日志
	在命令行输入：idevicesyslog
	查看当前已连接的设备的UUID = idevice_id --list
	查看和操作设备的描述文件 = ideviceprovision list
	获取设备名称 idevicename
	获取设备时间 idevicedate
	截图 idevicescreenshot

	1，将设备日志写入到文件
		idevicesyslog >> iphone.log 
	2，用tail -f和grep查看log
		tail -f iphone.log
		tail -f iphone.log | grep 'QQ'     ----查看包含QQ的行
Unity2018导出的Xcode项目替换资源流程
	1，打开配置好的 Xcode 工程，选中 Data、Classes、Libraries 文件夹，以 Move to Trash 方式删除,
	2，使用 Untiy 导出新的 Xcode，将新工程的 Data、Classes、Libraries 文件夹，复制到旧工程路径下
	3，在旧工程中添加 Classes、Libraries（只引用一次） 文件夹，以 create groups 方式添加到  Unity-iPhone
	4，在旧工程中添加 Data 文件夹，以 create folder references 方式添加到 Unity-iPhone
	5, 检查Targets- Build Phases 下
		1，CopyBundle Resources 资源文件
		2，headers头文件 sdk的所有头文件
		3，Compile Sources 自动添加
		4，Link Binary With Libraries 链接库 手动添加
		5，Embed Frameworks 嵌入库，如果SDK需要

	6, Targets--Build Settings 下
		1,Always Embed Swift Standard Libraies 总是嵌入swift标准库
		2,Link With Standard Libraries 链接到标准库
		3,Other Linker Flags  
		4,Sigining -- Code Signing Identity 代码签名标识符：证书
		User-Defined


iOS 32和64位指令的支持
	armv6: iPhone, iPhone 3G, iPod 1G/2G
	armv7: iPhone 3GS, iPhone 4, iPhone 4S, iPod 3G/4G/5G, iPad, iPad 2, iPad 3, iPad Mini
	armv7s: iPhone 5, iPhone 5c, iPad 4
	arm64: iPhone X，iPhone 8(Plus)，iPhone 7(Plus)，iPhone 6(Plus)，iPhone 6s(Plus), iPhone 5s, iPad Air(2), Retina iPad Mini(2,3)
	arm64e: XS/XS Max/XR/ iPhone 11, iPhone 11 pro x86_64: 模拟器64位处理器 i386: 模拟器32位处理器

iOS 包大小(用Swift 包体过大原因)
	12.2以上的系统，发布证书出包，不会包含swift support文件夹
	参考地址：https://blog.51cto.com/laynestone/2490783
	包优化大小：https://www.sohu.com/a/492440265_121124372

Build Settings -> Make Strings Read-Only设置为YES


追踪权限审核：IDFA 广告投放
	App Tracking Transparency 权限请求
	IOS 国内审核需要添加
		NSUserTrackingUsageDescription  描述语言
		App Uses Non-Exempt Encryption  No

		Enable App SandBox
		Code Signing Inject Base Entitlements

		libSandbox.dylib,sandbox.kext,appleMatch.kext,libsystem.dylib

独享账号购买网址
	https://card.helove.me/buy/3

iOS app包名必须和后台商品配置一致，否则无法进行支付

iOS 日志调试查看
	brew update
	brew install ideviceinstaller
	brew install libimobiledevice
	https://github.com/libimobiledevice/libimobiledevice
	查看系统日志
	在命令行输入：idevicesyslog
	查看当前已连接的设备的UUID = idevice_id --list
	查看和操作设备的描述文件 = ideviceprovision list
	获取设备名称 idevicename
	获取设备时间 idevicedate
	截图 idevicescreenshot

iOS 资源优化：
	图集采用 ASTC 5x5 block
	JPG贴图采用 STC 6x6 block
	PNG贴图采用 ASTC 5x5 block


iOS 屏幕边缘手势：UnityAppController
- (UIRectEdge)preferredScreenEdgesDeferringSystemGestures {
    return UIRectEdgeBottom;
}

git下载命令:pod 'EaseMobSDK', :git => 'https://github.com/easemob/sdk-ios-cocoapods.git'


Unity ios 函数回调
	//委托声明
	private delegate void iOSCallBackFunction(int result, string msg);
	[MonoPInvokeCallback(iOSCallBackFunction)]//C#签名函数，必须静态方法，否则异常
	static void CalledByNativeC(int result, string msg)
	{}

	// 把C#中的回调函数传给IOS
	#if UNITY_IPHONE || UNITY_IOS
	[DllImport("__Internal")]
	public static extern void RegeditCallFunction(iOSCallBackFunction iOSCallBack)
	#endif
	调用: RegeditCallFunction(CalledByNativeC);  

	//iOS extern "C" 部分内
	typedef void (*OnViewClosed)(int result, const char* msg);  // 定义函数指针
	static OnViewClosed s_calledFromCSharp = NULL;
	// 接受C#层传过来的函数指针
	void SetOnViewClosed(OnViewClosed viewClosed)    
	{
	    s_calledFromCSharp = viewClosed;
	}
	//iOS 故障查询
	https://docs.unity3d.com/cn/2019.4/Manual/TroubleShootingIPhone.html

mac shell 命令权限开启
  	开启command文件权限命令：
	chmod +x  /Users/admin/Desktop/打开控制台.command

iOS的crash日志符号化操作
https://jasemin.github.io/2019/10/31/hello-world/

Pod 库引用使用：
	ruby -v
	sudo gem install cocoapods
	失败后执行如下：
		gem sources –remove https://rubygems.org/ 
		gem sources -a http://ruby.taobao.org/
		查看安装: gem sources -l
	pod repo update 

	引用第三方库命令
		cd 切换到工程目录
		pod init  
		pod Podfile  
		vim Podfile  输入i 进入编辑
		例如：
			use_frameworks!
			target 'Unity-iPhone' do
				pod 'Google-Mobile-Ads-SDK' , ‘版本’
			end
		完成后，按下Esc退出键,接着输入： 然后 wq保存退出
		pod install 
		pod install --repo-update

	降级：
		卸载当前版本：sudo gem uninstall cocoapods
		下载旧版本：sudo gem install cocoapods -v 1.11.2

	Mac命令行终端下使用shadowsocks翻墙，解决网络问题：参考地址=https://www.ancii.com/aqrzgnnwl/
		1，privoxy安装：brew install privoxy
		2，privoxy配置：vim /usr/local/etc/privoxy/config
			加入配置：listen-address 0.0.0.0:8118
					 forward-socks5 / localhost:7890 .
			注意：第一行设置privoxy监听任意IP地址的8118端口。第二行设置本地socks5代理客户端端口，注意不要忘了最后有一个空格和点号。
		3，启动privoxy：sudo /usr/local/sbin/privoxy /usr/local/etc/privoxy/config
		4，查看启动：netstat -na | grep 8118
		5，privoxy使用，输入如下命令行
			export http_proxy='http://localhost:8118'
			export https_proxy='http://localhost:8118'
		6, 取消设置
			unset http_proxy
			unset https_proxy
		7，pod install

安装brew的命令
	/bin/zsh -c "$(curl -fsSL https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh)"

查看console崩溃报告
	Window > Devices and Simulators > Show the device console


自定义剥离过程中不移除
	<linker>
	       <assembly fullname="mscorlib">
	               <namespace fullname="System.Security.Cryptography" preserve="all"/>
	       </assembly>
	</linker>


Mac 上svn的使用
	更改IP路径：svn sw --relocate   svn://old_ip/目录    svn://new_ip/目录
	下拉项目：svn checkout  svn服务器路径  本地磁盘路径
	解决svn更新无限弹密码输入框：需要删除【钥匙串访问app】所有svn登录记录
	mac任务进度杀死：【活动监视器】App

测试设备问题:
	未添加测试设备id到测试证书中，安装中提示验证不完整性。

Lua 编译
	[TARGETS 和 PROJECT] --> Build Setting --> Enable Bitcode 设置为 No
	TARGETS --> Build Setting --> Other Linker Flags 设置为 -ObjC

Unity2019以上版本
	动态库：放在unity-iphone(注意需要sign&embeded) 和 unityFramework 里面 两个都引用
	静态库：仅放在unityFramework 里面
	不可添加的库： libMTLCapture.tbd 
	添加xcode引用 Classes/Native 文件夹，以 create groups 方式添加到  UnityFrameworks
	添加xcode引用 Data 文件夹，以 create folder references 方式添加到 Unity-iPhone

GoogleAdMod 广告
	所有xcframework库：仅放在unityFramework 里面 不嵌入
	在 UnityAppController.m-->didFinishLaunchingWithOptions 添加初始代码
		[GADMobileAds.sharedInstance startWithCompletionHandler:nil];
	添加系统库：javaScripCore.framework
	配置参数:
		<key>GADApplicationIdentifier</key>
	    <string>ca-app-pub-9552635752246613~6922176234</string>  广告应用id
	    <key>SKAdNetworkItems</key>
	    ....

iOS	IDFA 权限请求弹框：
	  if(@available(iOS14, *)) {
			[ATTrackingManager requestTrackingAuthorizationWithCompletionHandler:^(ATTrackingManagerAuthorizationStatus status) {
				if (status == ATTrackingManagerAuthorizationStatusAuthorized) {
					NSString *idfaString = [[ASIdentifierManager sharedManager] advertisingIdentifier].UUIDString;
			 	}
			}];
		}else{// 使用原方式访问 IDFA
			 NSString *IDFA = [[[ASIdentifierManager sharedManager] advertisingIdentifier] UUIDString];
		}
	  调用放在此方法里： UnityAppController-->applicationDidBecomeActive
	  添加系统库：AppTrackingTransparency.framework

iOS 二维码生成
	将此字符串生成二维码即可。
	itms-services://?action=download-manifest&url=https://.../testPlist.plist
	参考地址：https://www.jianshu.com/p/0de966e86481

iOS，info权限配置
	1，App提审提示缺少出口合规证明
		<key>App Uses Non-Exempt Encryption</key>
		<false/>
	2，WiFi启动网络连接
		<key>UIRequiresPersistentWiFi</key>
		<true/>
	3，http权限和ip访问
		<key>NSAppTransportSecurity</key>
		<dict>
	        <key>NSExceptionDomains</key>
	        <dict>
	            <key>oss.calf66.top</key>
	            <dict>
	                <key>NSExceptionAllowInsecureHTTPLoads</key>
	                <true/>
	                <key>NSExceptionRequiresForwardSecrecy</key>
	                <true/>
	                <key>NSIncludesSubdomains</key>
	                <true/>
	                <key>NSTemporaryExceptionAllowsInsecureHTTPLoads</key>
	                <true/>
	            </dict>
	        </dict>
			<key>NSAllowsArbitraryLoads</key>
			<true/>
			<key>NSAllowsArbitraryLoadsForMedia</key>
			<true/>
			<key>NSAllowsArbitraryLoadsInWebContent</key>
			<true/>
		</dict>


unity 导出参考：
https://www.jianshu.com/p/8471114d6c3d

Unity 结构体传参交换 IOS
		C#代码
		[StructLayout(LayoutKind.Sequential)]
	    internal struct iOSNotificationData
	    {
	        public string identifier;
	        public Int32 badge;
	    }
		[DllImport("__Internal")]
        private static extern void _ScheduleLocalNotification(iOSNotificationData data);

        oc代码
        typedef struct iOSNotificationData
		{
		    char* identifier;
		    int badge;

		} iOSNotificationData;

		void _ScheduleLocalNotification(iOSNotificationData data)
		{
		    iOSNotificationData* notificationData = &data;
		}


Lua静态库生成：
	下载Lua源代码
	curl -R -O http://www.lua.org/ftp/lua-5.4.3.tar.gz
	tar zxf lua-5.4.3.tar.gz
	cd lua-5.4.3
	打开Xcode，创建一个新的静态库工程。
	将Lua的源代码文件复制到Xcode工程目录中。
	cp *.c *.h /Path/To/XcodeProject/LuaStaticLibrary
	在Xcode工程设置中，确保以下配置：
	在Build Settings中，设置正确的Compile Flags，例如：-fno-common -nostdlib -lgcc。
	在Build Phases的"Compile Sources"中，将Lua的源文件设置为Compile Sources。
	如果需要，配置其他必要的Build Settings，如包含的头文件路径（Header Search Paths）和库搜索路径（Library Search Paths）。
	编译工程，生成lua.a。
	在Xcode中，点击"Product" -> "Build" 或使用快捷键⌘B进行编译。编译成功后，在工程的Products文件夹下会生成liblua.a或lua.a文件。

